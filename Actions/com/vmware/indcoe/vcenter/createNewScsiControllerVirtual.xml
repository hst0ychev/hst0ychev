<?xml version='1.0' encoding='UTF-8'?>
<dunes-script-module name="createNewScsiControllerVirtual" result-type="Any" api-version="6.0.0" id="0930b47a-ff84-49a2-838d-290c35e1e425" version="0.0.1" allowed-operations="evf" category-name="com.vmware.indcoe.vcenter">
  <script encoded="false"><![CDATA[var sc = {
	createscsiController : function(vmName){
		vmName = vmName.replace(" ","")
		var vCACVms = Server.findAllForType("vCAC:VirtualMachine", "VirtualMachineName eq '"+vmName+"'");
		//var psHost;
		var sdkConnections = VcPlugin.allSdkConnections;  
		var vcenterName;              
		for(var j in sdkConnections){
			System.debug("Vm id "+vCACVms[0].vmUniqueID)
			try{
				vcVirtualMachine = sdkConnections[j].searchIndex.findByUuid(null,vCACVms[0].vmUniqueID,true,true);
				if(vcVirtualMachine){
					vcenterName = sdkConnections[j].id
					System.debug("SDK id "+sdkConnections[j].id)
				}
			}catch(e){System.debug("Unable to find vc vm by uuid in sdkConnection "+sdkConnections[j]);}
		}
		//get category
		var category = Server.getConfigurationElementCategoryWithPath("Helper");
		//die in a fire if non-existent
		if (category == null) {
			throw "Configuration element category not found or empty!";
		}
		//get _all_ the elements
		var elements = category.configurationElements;
		var vcenterCompVar;
		//retrieve names
		for (i = 0; i < elements.length; i++) {
			if (elements[i].name == "vCenterCreds") {
				//found required element
				var split_val = vcenterName.split('.')
				var attrib='';
				for(var hh in split_val){ attrib = attrib+split_val[hh]}
				vcenterCompVar = elements[i].getAttributeWithKey(attrib).value;
				psHost = elements[i].getAttributeWithKey("psHost").value
				//System.debug(psHost)
				break
			}
		}
		var username = vcenterCompVar.get("username")
		var password = vcenterCompVar.get("password")
		var script = ""
		script += "Import-Module VMware.VimAutomation.Core\n"
		script += "Connect-VIServer -Server '"+vcenterName+ "' -user '"+username+"' -password '"+password+"'\n" 
		script += "$BusNumber = 1\n"
		script += "$virtualmachineid = Get-VM -Name "+vmName+" | select -ExpandProperty id\n"
		script += "$virtualMachine = Get-VM -Id $VirtualMachineId\n"
		script += "$scsiController = $virtualMachine | Get-ScsiController\n"
		script += "if ($scsiController.ExtensionData.BusNumber -contains $BusNumber){\n"
		script += "Write-Host 'exist'\n"
		script += "}else{\n"
		script += "    $spec = New-Object VMware.Vim.VirtualMachineConfigSpec\n"
		script += "    $spec.DeviceChange = New-Object VMware.Vim.VirtualDeviceConfigSpec[](1)\n"
		script += "    $spec.DeviceChange[0] = New-Object VMware.Vim.VirtualDeviceConfigSpec\n"
		script += "    $spec.DeviceChange[0].Device = New-Object VMware.Vim.ParaVirtualSCSIController #ParaVirtualSCSIController, VirtualBusLogicController, VirtualLsiLogicController, VirtualLsiLogicSASController\n"
		script += "    $spec.DeviceChange[0].Device.SharedBus = 'virtualSharing' #noSharing, physicalSharing, virtualSharing\n"
		script += "    $spec.DeviceChange[0].Device.ScsiCtlrUnitNumber = 1 #The unit number of the SCSI controller. The SCSI controller sits on its own bus, so this field defines which slot the controller is using.\n"
		script += "    $spec.DeviceChange[0].Device.DeviceInfo = New-Object VMware.Vim.Description\n"
		script += "    $spec.DeviceChange[0].Device.DeviceInfo.Summary = 'New SCSI controller'\n"
		script += "    $spec.DeviceChange[0].Device.DeviceInfo.Label = 'New SCSI controller'\n"
		script += "    $spec.DeviceChange[0].Device.BusNumber = $BusNumber\n"
		script += "    $spec.DeviceChange[0].Operation = 'add'\n"
		script += "    $vm = Get-View -Id $virtualmachineid\n"
		script += "    [void]$vm.ReconfigVM_Task($spec)\n"
		script += "}\n"
		System.log("Script "+script)
		var powerObj = System.getModule("com.vmware.indoce.library.executepowershell").ExecutePowershell()
		var response = powerObj.executeScript(psHost,script)
		System.debug("Response "+response)
	}
}
return sc]]></script>
</dunes-script-module>