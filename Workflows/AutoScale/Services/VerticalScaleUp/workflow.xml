<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item1" object-name="workflow:name=generic" id="eab38250-7644-4af0-a0bc-cbab4ba01992" version="0.0.1" api-version="6.0.0" allowed-operations="evf" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[VerticalScaleUp]]></display-name>
  <position y="50.0" x="100.0"/>
  <input>
    <param name="trapData" type="Properties"/>
  </input>
  <attrib name="vCACCAFEHost" type="vCACCAFE:VCACHost" read-only="false" conf-id="8f368667-13ac-4498-850f-ae6734e9e98b" conf-key="vcaccafeHost">
    <value encoded="n"><![CDATA[dunes://service.dunes.ch/CustomSDKObject?id='e8dc59dd-9ae4-44aa-86ad-50240e6c34d3'&dunesName='vCACCAFE:VCACHost']]></value>
  </attrib>
  <attrib name="resourceOperationBindingId" type="string" read-only="false">
    <value encoded="n"><![CDATA[Infrastructure.Machine.Action.Reconfigure]]></value>
  </attrib>
  <attrib name="vCACHost" type="vCAC:VCACHost" read-only="false" conf-id="8f368667-13ac-4498-850f-ae6734e9e98b" conf-key="vcacHost">
    <value encoded="n"><![CDATA[dunes://service.dunes.ch/CustomSDKObject?id='7678fd07-7e94-41fb-b504-826e693933a5'&dunesName='vCAC:VCACHost']]></value>
  </attrib>
  <workflow-item name="item0" type="end" end-mode="0">
    <position y="45.40909090909091" x="384.5"/>
  </workflow-item>
  <workflow-item name="item1" out-name="item0" type="task">
    <display-name><![CDATA[vertical scale up]]></display-name>
    <script encoded="false"><![CDATA[//Extracting Data from SNMP Trap data
var vmName= trapData.get("vmName");
System.debug("VM name "+vmName);
var scaleOption = trapData.get("scaleUpOption");
var alertId = trapData.get("alertId");
System.debug("alert id "+alertId);
var isMemoryScale;
var isCpuScale;
//Calling action to get the catalog resource
var catalogResource = System.getModule("com.vmware.indcoe.library.vrautil").GetCatalogResourceFilterByName(vCACCAFEHost, vmName);
//Calling action to get resource action by id
var resourceOperation = System.getModule("com.vmware.indcoe.library.vrautil").GetResourceOperationById(catalogResource,resourceOperationBindingId);
//Getting vCAC VM properties by name
var vcacVMProp = System.getModule("com.vmware.indcoe.library.vrautil").GetVcacVMProperties(vmName,vCACHost);
//Prepare properties for reconfigure
System.log("Building resource action request properties payload");
var cpuScale = vcacVMProp.get("VirtualMachine.CPU.Count")*1+2
System.debug("Updated CPU"+cpuScale);
var memoryScale = vcacVMProp.get("VirtualMachine.Memory.Size")*1+2048
System.debug("Updated Memory :"+memoryScale)
//Request Reconfigure resource action
var resourceActionRequest = System.getModule("com.vmware.indcoe.library.vrautil").RequestResourceAction(resourceOperation,scaleOption,cpuScale,memoryScale)
//Calling wait for resource action request workflow
var wfId = "8c275d1d-c296-4975-adca-c915f33cc96e";
var waitRequestParam = new Properties();
waitRequestParam.put("request",resourceActionRequest);
waitRequestParam.put("timeout",null);
var waitRequest = runWF(wfId,waitRequestParam);
//Calling current task status function
currentTaskStatus(vCACCAFEHost,vCACHost,vmName);
// function to launch WF
function runWF(wfId,workflowParameters) {
	var workflowToLaunch = Server.getWorkflowWithId(wfId);
	if (workflowToLaunch == null) {
		throw "Workflow not found";
	}	
	System.log("Launching wait for resource action request WF : " + wfId);
	var wfToken = workflowToLaunch.execute(workflowParameters);
}
//Checking whether reconfigure task is completed or not.
function currentTaskStatus(vCACCAFEHost,vCACHost,vmName){
	var vCACEntity  = System.getModule("com.vmware.indcoe.library.vrautil").GetVcacEntityByVMName(vCACCAFEHost,vCACHost,vmName);
	//Get the vCACVM object from _vCACEntity
	var vCACInv = vCACEntity.getInventoryObject();
	var currentTask = vCACInv.currentTask;
	if(!currentTask){
		System.debug("Task Completed");
	}else{
		if (currentTask.indexOf("failed") != -1) {	
			throw "Reconfigure Error: " + currentTask;
		}
		System.sleep(20000)
		currentTaskStatus();
	}	
}

//Acknowledging Alert
var vropsObject = System.getModule("com.vmware.indcoe.library.vropsoperation").AutoScalevROPsOperations(vropsRestHost);
//get category
var category = Server.getConfigurationElementCategoryWithPath("Helper");
//die in a fire if non-existent
if (category == null) {
    throw "Configuration element category not found or empty!";
}
//get _all_ the elements
var elements = category.configurationElements;
var elementName = "vROPSAuth";
var attributeName = "username";
var attributeName1 = "password";
var attributeName2 = "vROPSRest"
var vropsRestHost
var username;
var password;
//retrieve names
for (i = 0; i < elements.length; i++) {
    if (elements[i].name == elementName) {
        //found required element
        username = elements[i].getAttributeWithKey(attributeName).value;
		password = elements[i].getAttributeWithKey(attributeName1).value;
		vropsRestHost = elements[i].getAttributeWithKey(attributeName2).value;
        if (username != null && password !=null) {
            System.log("Found attribute '" + attributeName + "' in '" + elementName + "' with value '" +username + "'");
          
        }
    }
}
//Acknowledging Alert
var vropsObject = System.getModule("com.vmware.indcoe.library.vropsoperation").AutoScalevROPsOperations(vropsRestHost);
//Authentication Json content
jsonContent = '{"username":"none","password":"none"}'
json = JSON.parse(jsonContent)
json.username = username
json.password = password
authContent = JSON.stringify(json);
var token = vropsObject.getAuthenticationToken(authContent);
//Acknowleding alert
var jsonContent = {
  "uuids" : [alertId]
}
var alertContent = JSON.stringify(jsonContent);
System.debug("Alert content "+alertContent);
//Setting Header
var header = new Properties();
header.put("Authorization","vRealizeOpsToken "+token);
var alertResult = vropsObject.acknowledgeAlert(alertContent,header)
if((alertResult["statusCode"] ==200) || (alertResult["statusCode"] ==201) || (alertResult["statusCode"] ==204)){
	System.log("Rest operation got completed "+alertResult["contenAsString"]);                                
}else
	throw "Rest Operation In complete response content : "+alertResult["contenAsString"] 
]]></script>
    <in-binding>
      <bind name="resourceOperationBindingId" type="string" export-name="resourceOperationBindingId"/>
      <bind name="trapData" type="Properties" export-name="trapData"/>
      <bind name="vCACCAFEHost" type="vCACCAFE:VCACHost" export-name="vCACCAFEHost"/>
      <bind name="vCACHost" type="vCAC:VCACHost" export-name="vCACHost"/>
    </in-binding>
    <out-binding/>
    <position y="55.40909090909091" x="204.5"/>
  </workflow-item>
  <presentation>
    <p-param name="trapData">
      <desc><![CDATA[trapData]]></desc>
    </p-param>
  </presentation>
</workflow>