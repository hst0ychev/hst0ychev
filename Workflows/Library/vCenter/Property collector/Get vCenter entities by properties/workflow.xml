<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item1" object-name="workflow:name=generic" id="6af07a67-22f6-4b5f-8be9-22085510da98" version="1.0.3" api-version="6.0.0" allowed-operations="vfe" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[Get vCenter entities by properties]]></display-name>
  <position y="50.0" x="100.0"/>
  <input>
    <param name="vc" type="VC:SdkConnection"/>
    <param name="filter" type="string"/>
    <param name="targetTypes" type="Array/string"/>
    <param name="properties" type="Array/string"/>
    <param name="rootObject" type="Any"/>
  </input>
  <output>
    <param name="foundObjects" type="Array/string"/>
  </output>
  <workflow-item name="item0" type="end" end-mode="0">
    <position y="45.40909090909091" x="364.5"/>
  </workflow-item>
  <workflow-item name="item1" out-name="item0" type="task">
    <display-name><![CDATA[pc.retrievePropertiesEx]]></display-name>
    <script encoded="false"><![CDATA[var containerRoot = null

if (typeof rootObject === 'undefined' || rootObject == null || rootObject == '<<null>>') {
    containerRoot = vc.rootFolder
} else {
    containerRoot = rootObject
}

var recursive = true

var containerView = vc.viewManager.createContainerView(containerRoot, targetTypes, recursive)

// create an object spec for the beginning of the traversal;
// container view is the root object for this traversal
var oSpec = new VcObjectSpec()
oSpec.obj = containerView.reference
oSpec.skip = true

// create a traversal spec to select all objects in the view
var tSpec = new VcTraversalSpec()
tSpec.name = 'traverseEntities'
tSpec.path = 'view'
tSpec.skip = false
tSpec.type = 'ContainerView'

// add it to the object spec
oSpec.selectSet = [tSpec]

var propertySpecs = new Array()
for (var t in targetTypes) {
    // specify the properties for retrieval
    var pSpec = new VcPropertySpec()
    pSpec.type = targetTypes[t]
    pSpec.pathSet = properties
    propertySpecs.push(pSpec)
}

var fs = new VcPropertyFilterSpec()
fs.objectSet = [ oSpec ]
fs.propSet = propertySpecs

var retrieveOptions = new VcRetrieveOptions()

var propertyCollector = vc.propertyCollector.createPropertyCollector()

try {
	retrieveResult = propertyCollector.retrievePropertiesEx([fs], retrieveOptions)

	do {
	    if (typeof retrieveResult !== 'undefined' && retrieveResult !== null) {
			processObjects(retrieveResult)
			if (retrieveResult.token !== 'undefined' && retrieveResult.token !== null) {
			    retrieveResult = propertyCollector.continueRetrievePropertiesEx(retrieveResult.token)
			} else {
			    break
			}	    
	    } else {
	      break;
	    }
	} while(true)
} finally {
    propertyCollector.destroyPropertyCollector()
    containerView.destroyView()
}

function processObjects(retrieveResult) {
    var resultObjects = retrieveResult.objects
    if (typeof foundObjects === 'undefined' || foundObjects === null) {
        foundObjects = new Array()
    }
    var pattern = new RegExp(filter)
    for (r in resultObjects) {
      var objContent = resultObjects[r]
      var id = objContent.obj.id
      var type = objContent.obj.type
      var props = objContent.propSet
      for (p in props) {
        if (pattern.test(props[p].val)) {
			var dunesId = "dunes://service.dunes.ch/CustomSDKObject?id='" 
                                      + vc.id + ",id:" + id +"'&dunesName='VC:" + type + "'"
            foundObjects.push(dunesId)
            break
        }
      }
    }
}]]></script>
    <in-binding>
      <bind name="vc" type="VC:SdkConnection" export-name="vc"/>
      <bind name="filter" type="string" export-name="filter"/>
      <bind name="targetTypes" type="Array/string" export-name="targetTypes"/>
      <bind name="properties" type="Array/string" export-name="properties"/>
      <bind name="rootObject" type="Any" export-name="rootObject"/>
    </in-binding>
    <out-binding>
      <bind name="foundObjects" type="Array/string" export-name="foundObjects"/>
    </out-binding>
    <position y="55.40909090909091" x="204.5"/>
  </workflow-item>
  <presentation>
    <p-param name="vc">
      <desc><![CDATA[vc]]></desc>
      <p-qual kind="static" name="show-select-as" type="string"><![CDATA[list]]></p-qual>
    </p-param>
    <p-param name="filter">
      <desc><![CDATA[filter]]></desc>
    </p-param>
    <p-param name="targetTypes">
      <desc><![CDATA[targetTypes]]></desc>
      <p-qual kind="static" name="genericEnumeration" type="Array/string"><![CDATA[#{#string#VirtualMachine#;#string#HostSystem#;#string#Folder#;#string#Datacenter#;#string#Datastore#;#string#Network#;#string#ComputeResource#;#string#ClusterComputeResource#;#string#ResourcePool#;#string#Task#}#]]></p-qual>
      <p-qual kind="static" name="defaultValue" type="Array/string"><![CDATA[#{#string#VirtualMachine#}#]]></p-qual>
    </p-param>
    <p-param name="properties">
      <desc><![CDATA[properties]]></desc>
      <p-qual kind="static" name="defaultValue" type="Array/string"><![CDATA[#{#string#name#}#]]></p-qual>
    </p-param>
    <p-param name="rootObject">
      <desc><![CDATA[rootObject]]></desc>
    </p-param>
  </presentation>
</workflow>