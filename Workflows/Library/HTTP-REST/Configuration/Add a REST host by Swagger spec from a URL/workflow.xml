<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item4" object-name="Workflow:name=generic" id="bec45895-430c-414a-b26a-a0c8e9670f1d" version="2.0.14" api-version="6.0.0" allowed-operations="vfe" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[Add a REST host by Swagger spec from a URL]]></display-name>
  <description><![CDATA[Add a REST host by Swagger spec from a web resource]]></description>
  <position y="136.3181818181818" x="45.0"/>
  <input>
    <param name="name" type="string">
      <description><![CDATA[Host name]]></description>
    </param>
    <param name="swaggerSpecUrl" type="string">
      <description><![CDATA[Swagger spec URL]]></description>
    </param>
    <param name="authentication" type="string">
      <description><![CDATA[Host authentication type]]></description>
    </param>
    <param name="authUserName" type="string">
      <description><![CDATA[Authentication user name]]></description>
    </param>
    <param name="authPassword" type="SecureString">
      <description><![CDATA[Authentication password]]></description>
    </param>
    <param name="consumerKey" type="string">
      <description><![CDATA[Consumer key]]></description>
    </param>
    <param name="consumerSecret" type="SecureString">
      <description><![CDATA[Consumer secret]]></description>
    </param>
    <param name="accessToken" type="string">
      <description><![CDATA[Access token]]></description>
    </param>
    <param name="accessTokenSecret" type="SecureString">
      <description><![CDATA[Access token secret]]></description>
    </param>
    <param name="connectionTimeout" type="number">
      <description><![CDATA[Connection timeout]]></description>
    </param>
    <param name="operationTimeout" type="number">
      <description><![CDATA[Operation timeout]]></description>
    </param>
    <param name="sessionMode" type="string">
      <description><![CDATA[Session mode]]></description>
    </param>
    <param name="oauth2Token" type="string">
      <description><![CDATA[OAuth 2.0 token]]></description>
    </param>
    <param name="workstation" type="string">
      <description><![CDATA[Workstation for NTLM authentication]]></description>
    </param>
    <param name="domain" type="string">
      <description><![CDATA[Domain for NTLM authentication]]></description>
    </param>
    <param name="ignoreWarnings" type="boolean">
      <description><![CDATA[If set to true, the certificate is accepted silently and added to the trusted store.]]></description>
    </param>
    <param name="hostVerification" type="boolean">
      <description><![CDATA[Verify whether the target host name matches the names stored inside the X.509 server certificate.]]></description>
    </param>
    <param name="key" type="Configurator:Key">
      <description><![CDATA[The PrivateKeyEntry to use for client certificate authentication.]]></description>
    </param>
    <param name="preferredCommunicationProtocol" type="string">
      <description><![CDATA[Preferred communication protocol - HTTP or HTTPS]]></description>
    </param>
    <param name="defaultContentType" type="string">
      <description><![CDATA[Defaut content type of HTTP requests that have a body]]></description>
    </param>
    <param name="schemaResourceUserBasicAuthUsername" type="string">
      <description><![CDATA[Basic authentication user name to access the Swagger spec web resource]]></description>
    </param>
    <param name="schemaResourceUserBasicAuthPassword" type="SecureString">
      <description><![CDATA[Basic authentication password to access the Swagger spec web resource]]></description>
    </param>
    <param name="preferredAcceptHeader" type="string">
      <description><![CDATA[Preferred media type for the Accept header]]></description>
    </param>
    <param name="autoUrlRedirection" type="boolean">
      <description><![CDATA[Automatically URL redirection]]></description>
    </param>
  </input>
  <output>
    <param name="restHost" type="REST:RESTHost">
      <description><![CDATA[The created RESTHost]]></description>
    </param>
  </output>
  <attrib name="errorCode" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[Error code]]></description>
  </attrib>
  <attrib name="host" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="keystoreList" type="Configurator:Keystores" read-only="false">
    <value encoded="n"><![CDATA[dunes://service.dunes.ch/CustomSDKObject?id='Keystores'&dunesName='Configurator:Keystores']]></value>
  </attrib>
  <workflow-item name="item0" out-name="item1" catch-name="item2" throw-bind-name="errorCode" type="task">
    <display-name><![CDATA[Add a REST Host]]></display-name>
    <script encoded="false"><![CDATA[var params  = {};
params.defaultContentType = defaultContentType;
params.preferredAcceptHeader = preferredAcceptHeader;

params.resolve = true ; 
var host = RESTHostManager.createRESTHostFromSwaggerSpecUrl(name, swaggerSpecUrl, getApiKeyValues(), preferredCommunicationProtocol, params);

host.connectionTimeout = connectionTimeout;
host.operationTimeout = operationTimeout;
host.hostVerification = hostVerification;

host.setAutoUrlRedirect(autoUrlRedirection);


if ( authentication == "OAuth 1.0" ) {
	var authParams = [consumerKey, consumerSecret, accessToken, accessTokenSecret];
} else if ( authentication == "OAuth 2.0" ) {
	var authParams = [oauth2Token];
} else if ( authentication == "NTLM" ) {
	var authParams = [sessionMode, authUserName, authPassword, workstation, domain];
} else {
	var authParams = [sessionMode, authUserName, authPassword];
}
var authenticationObject = RESTAuthenticationManager.createAuthentication(authentication, authParams);
host.authentication = authenticationObject;


if (key != null) {
    System.debug("Will use the following private key id: " + key.id);
    host.privateKeyId = key.id;
}

restHost = RESTHostManager.addHost(host);


function getApiKeyValues() {
   var apiKeyArray = [];
   if (schemaResourceUserBasicAuthUsername  && schemaResourceUserBasicAuthPassword) {
       var e = "Basic " + HTTPBasicAuthentication.getBasicAuthHeaderValue(schemaResourceUserBasicAuthUsername, schemaResourceUserBasicAuthPassword);
       var basicAuthentication =  new AuthorizationValue("Authorization", HTTPBasicAuthentication.getBasicAuthHeaderValue(schemaResourceUserBasicAuthUsername, schemaResourceUserBasicAuthPassword),"header");
       apiKeyArray.push(basicAuthentication);
   }
   return apiKeyArray;
}]]></script>
    <in-binding>
      <bind name="accessToken" type="string" export-name="accessToken"/>
      <bind name="accessTokenSecret" type="SecureString" export-name="accessTokenSecret"/>
      <bind name="authentication" type="string" export-name="authentication"/>
      <bind name="authPassword" type="SecureString" export-name="authPassword"/>
      <bind name="authUserName" type="string" export-name="authUserName"/>
      <bind name="connectionTimeout" type="number" export-name="connectionTimeout"/>
      <bind name="consumerKey" type="string" export-name="consumerKey"/>
      <bind name="consumerSecret" type="SecureString" export-name="consumerSecret"/>
      <bind name="name" type="string" export-name="name"/>
      <bind name="operationTimeout" type="number" export-name="operationTimeout"/>
      <bind name="sessionMode" type="string" export-name="sessionMode"/>
      <bind name="oauth2Token" type="string" export-name="oauth2Token"/>
      <bind name="domain" type="string" export-name="domain"/>
      <bind name="workstation" type="string" export-name="workstation"/>
      <bind name="hostVerification" type="boolean" export-name="hostVerification"/>
      <bind name="key" type="Configurator:Key" export-name="key"/>
      <bind name="defaultContentType" type="string" export-name="defaultContentType"/>
      <bind name="schemaResourceUserBasicAuthUsername" type="string" export-name="schemaResourceUserBasicAuthUsername"/>
      <bind name="schemaResourceUserBasicAuthPassword" type="SecureString" export-name="schemaResourceUserBasicAuthPassword"/>
      <bind name="swaggerSpecUrl" type="string" export-name="swaggerSpecUrl"/>
      <bind name="preferredCommunicationProtocol" type="string" export-name="preferredCommunicationProtocol"/>
      <bind name="preferredAcceptHeader" type="string" export-name="preferredAcceptHeader"/>
      <bind name="autoUrlRedirection" type="boolean" export-name="autoUrlRedirection"/>
    </in-binding>
    <out-binding>
      <bind name="restHost" type="REST:RESTHost" export-name="restHost"/>
      <bind name="errorCode" type="string" export-name="errorCode"/>
    </out-binding>
    <position y="146.3181818181818" x="544.5"/>
  </workflow-item>
  <workflow-item name="item1" type="end" end-mode="0">
    <position y="281.77272727272725" x="584.5"/>
  </workflow-item>
  <workflow-item name="item2" throw-bind-name="errorCode" type="end" end-mode="1">
    <position y="136.3181818181818" x="744.5"/>
  </workflow-item>
  <workflow-item name="item4" out-name="item8" type="custom-condition" alt-out-name="item0">
    <display-name><![CDATA[Check https protocol]]></display-name>
    <script encoded="false"><![CDATA[return (/^https:/).test(swaggerSpecUrl);]]></script>
    <in-binding>
      <bind name="swaggerSpecUrl" type="string" export-name="swaggerSpecUrl"/>
    </in-binding>
    <description><![CDATA[Determines whether the protocol is HTTPS.]]></description>
    <position y="136.3181818181818" x="284.5"/>
  </workflow-item>
  <workflow-item name="item3" throw-bind-name="errorCode" type="end" end-mode="1">
    <position y="9.045454545454543" x="784.5"/>
  </workflow-item>
  <workflow-item name="item5" out-name="item0" catch-name="item3" throw-bind-name="errorCode" type="link" linked-workflow-id="c5a874a2-e8e7-480d-bdde-d1a80b8a3011">
    <display-name><![CDATA[Import a certificate from URL]]></display-name>
    <in-binding>
      <bind name="url" type="string" export-name="host">
        <description><![CDATA[Enter a URL or host:port for non-HTTPS SSL services]]></description>
      </bind>
      <bind name="ignoreWarnings" type="boolean" export-name="ignoreWarnings">
        <description><![CDATA[If set to true, the certificate is accepted silently and added to the trusted store.]]></description>
      </bind>
    </in-binding>
    <out-binding/>
    <description><![CDATA[Imports an SSL certificate into the server trust store.]]></description>
    <position y="19.045454545454543" x="544.5"/>
  </workflow-item>
  <workflow-item name="item8" out-name="item5" type="task">
    <display-name><![CDATA[Get a host from a base URL]]></display-name>
    <script encoded="false"><![CDATA[host = url.substring(8, url.length);

var end = host.indexOf("/");
if (end != -1) {
	host = host.substring(0, end);
}
]]></script>
    <in-binding>
      <bind name="url" type="string" export-name="swaggerSpecUrl"/>
    </in-binding>
    <out-binding>
      <bind name="host" type="string" export-name="host"/>
    </out-binding>
    <position y="19.045454545454543" x="285.0"/>
  </workflow-item>
  <presentation>
    <p-step>
      <title><![CDATA[Add a REST host]]></title>
      <p-group>
        <title><![CDATA[Host Properties]]></title>
        <desc><![CDATA[Properties to create a new host. The name is the unique identifier for the host.]]></desc>
        <p-param name="name">
          <desc><![CDATA[Name]]></desc>
          <p-qual kind="static" name="mandatory" type="boolean"><![CDATA[true]]></p-qual>
        </p-param>
        <p-param name="swaggerSpecUrl">
          <desc><![CDATA[Swagger Spec URL]]></desc>
          <p-qual kind="static" name="mandatory" type="boolean"><![CDATA[true]]></p-qual>
          <p-qual kind="ognl" name="visible" type="boolean"><![CDATA[!#isLocalSchema]]></p-qual>
        </p-param>
        <p-param name="preferredCommunicationProtocol">
          <desc><![CDATA[Preferred communication protocol - the selected protocol is used, if it is among the supported protocols specified by the Swagger spec. If the Swagger spec does not contain supported protocols, then the protocol of the Swagger spec web resource is used.]]></desc>
          <p-qual kind="static" name="genericEnumeration" type="Array/string"><![CDATA[#{#string#HTTP#;#string#HTTPS#}#]]></p-qual>
        </p-param>
        <p-param name="defaultContentType">
          <desc><![CDATA[Default Content-type header]]></desc>
        </p-param>
        <p-param name="preferredAcceptHeader">
          <desc><![CDATA[Preferred Accept-type header]]></desc>
        </p-param>
        <p-param name="connectionTimeout">
          <desc><![CDATA[Connection timeout (seconds)]]></desc>
          <p-qual kind="static" name="defaultValue" type="number"><![CDATA[30.0]]></p-qual>
          <p-qual kind="static" name="minNumberValue" type="Number"><![CDATA[0.0]]></p-qual>
        </p-param>
        <p-param name="operationTimeout">
          <desc><![CDATA[Operation timeout (seconds)]]></desc>
          <p-qual kind="static" name="defaultValue" type="number"><![CDATA[60.0]]></p-qual>
          <p-qual kind="static" name="minNumberValue" type="Number"><![CDATA[0.0]]></p-qual>
        </p-param>
        <p-param name="ignoreWarnings">
          <desc><![CDATA[If set to true, the certificate is accepted silently and added to the trusted store.]]></desc>
          <p-qual kind="static" name="defaultValue" type="boolean"><![CDATA[false]]></p-qual>
        </p-param>
        <p-param name="autoUrlRedirection">
          <desc><![CDATA[Automatically URL redirection]]></desc>
        </p-param>
      </p-group>
      <p-group>
        <title><![CDATA[Spec Authentication]]></title>
        <desc><![CDATA[If the Swagger spec web resource requires authentication, provide access credentials.]]></desc>
        <p-qual kind="ognl" name="visible" type="boolean"><![CDATA[!#isLocalSchema]]></p-qual>
        <p-param name="schemaResourceUserBasicAuthUsername">
          <desc><![CDATA[Basic authentication user name for accessing the Swagger spec web resource]]></desc>
        </p-param>
        <p-param name="schemaResourceUserBasicAuthPassword">
          <desc><![CDATA[Basic authentication password for accessing the Swagger spec web resource]]></desc>
        </p-param>
      </p-group>
    </p-step>
    <p-step>
      <title><![CDATA[Host Authentication]]></title>
      <p-group>
        <title><![CDATA[Authentication Type]]></title>
        <desc><![CDATA[Authentication type]]></desc>
        <p-param name="authentication">
          <desc><![CDATA[Host authentication type]]></desc>
          <p-qual kind="static" name="mandatory" type="boolean"><![CDATA[true]]></p-qual>
          <p-qual kind="static" name="genericEnumeration" type="Array/string"><![CDATA[#{#string#NONE#;#string#OAuth 1.0#;#string#OAuth 2.0#;#string#Basic#;#string#Digest#;#string#NTLM#;#string#Kerberos#}#]]></p-qual>
        </p-param>
      </p-group>
      <p-group>
        <title><![CDATA[User credentials]]></title>
        <desc><![CDATA[If the Shared Session is selected, the provided credentials are used. If the Per User Session option is used, the credentials are retrieved from the user currently logged in.]]></desc>
        <p-qual kind="ognl" name="visible" type="boolean"><![CDATA[#authentication!="NONE"&&#authentication!="OAuth 1.0"&&#authentication!="OAuth 2.0"]]></p-qual>
        <p-param name="sessionMode">
          <desc><![CDATA[Session mode]]></desc>
          <p-qual kind="static" name="genericEnumeration" type="Array/string"><![CDATA[#{#string#Shared Session#;#string#Per User Session#}#]]></p-qual>
        </p-param>
        <p-param name="authUserName">
          <desc><![CDATA[Authentication user name]]></desc>
          <p-qual kind="static" name="mandatory" type="boolean"><![CDATA[true]]></p-qual>
          <p-qual kind="ognl" name="visible" type="boolean"><![CDATA[#sessionMode=="Shared Session"]]></p-qual>
        </p-param>
        <p-param name="authPassword">
          <desc><![CDATA[Authentication password]]></desc>
          <p-qual kind="static" name="mandatory" type="boolean"><![CDATA[true]]></p-qual>
          <p-qual kind="ognl" name="visible" type="boolean"><![CDATA[#sessionMode=="Shared Session"]]></p-qual>
          <p-qual kind="static" name="maxStringLength" type="Number"><![CDATA[256]]></p-qual>
        </p-param>
      </p-group>
      <p-group>
        <title><![CDATA[OAuth 1.0]]></title>
        <desc><![CDATA[OAuth authentication properties. For details, see https://oauth.net/]]></desc>
        <p-qual kind="ognl" name="visible" type="boolean"><![CDATA[#authentication=="OAuth 1.0"]]></p-qual>
        <p-param name="consumerKey">
          <desc><![CDATA[Consumer key]]></desc>
          <p-qual kind="static" name="mandatory" type="boolean"><![CDATA[true]]></p-qual>
        </p-param>
        <p-param name="consumerSecret">
          <desc><![CDATA[Consumer secret]]></desc>
          <p-qual kind="static" name="mandatory" type="boolean"><![CDATA[true]]></p-qual>
        </p-param>
        <p-param name="accessToken">
          <desc><![CDATA[Access token]]></desc>
        </p-param>
        <p-param name="accessTokenSecret">
          <desc><![CDATA[Access token secret]]></desc>
        </p-param>
      </p-group>
      <p-group>
        <title><![CDATA[OAuth 2.0]]></title>
        <p-qual kind="ognl" name="visible" type="boolean"><![CDATA[#authentication=="OAuth 2.0"]]></p-qual>
        <p-param name="oauth2Token">
          <desc><![CDATA[Token]]></desc>
          <p-qual kind="static" name="mandatory" type="boolean"><![CDATA[true]]></p-qual>
        </p-param>
      </p-group>
      <p-group>
        <title><![CDATA[NTLM]]></title>
        <p-qual kind="ognl" name="visible" type="boolean"><![CDATA[#authentication=="NTLM"]]></p-qual>
        <p-param name="workstation">
          <desc><![CDATA[Workstation for NTLM authentication]]></desc>
          <p-qual kind="ognl" name="dataBinding" type="string"><![CDATA[GetAction("com.vmware.library.http-rest.configuration","getRESTHostAuthenticationProperty").call( #host , 3.0, #authentication, (#authentication=="NTLM") )]]></p-qual>
        </p-param>
        <p-param name="domain">
          <desc><![CDATA[Domain for NTLM authentication]]></desc>
          <p-qual kind="ognl" name="dataBinding" type="string"><![CDATA[GetAction("com.vmware.library.http-rest.configuration","getRESTHostAuthenticationProperty").call( #host , 4.0, #authentication, (#authentication=="NTLM") )]]></p-qual>
          <p-qual kind="static" name="mandatory" type="boolean"><![CDATA[true]]></p-qual>
        </p-param>
      </p-group>
    </p-step>
    <p-step>
      <title><![CDATA[Advanced]]></title>
      <p-group>
        <title><![CDATA[SSL]]></title>
        <p-param name="hostVerification">
          <desc><![CDATA[Verify whether the target host name matches the names stored inside the X.509 server certificate.]]></desc>
          <p-qual kind="static" name="defaultValue" type="boolean"><![CDATA[true]]></p-qual>
        </p-param>
        <p-param name="key">
          <desc><![CDATA[The PrivateKeyEntry used for client certificate authentication.]]></desc>
          <p-qual kind="ognl" name="sdkRootObject" type="any"><![CDATA[#keystoreList]]></p-qual>
        </p-param>
      </p-group>
    </p-step>
  </presentation>
</workflow>