<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item0" object-name="Workflow:name=generic" id="A0808080808080808080808080808080EA808080013049260427240aee8dc5c71" version="1.0.1" api-version="6.0.0" allowed-operations="vfe" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[Wait on trigger without queue construction]]></display-name>
  <description><![CDATA[Demonstrats AMQP plug-in usage of triggers.]]></description>
  <position y="20.0" x="180.0"/>
  <input>
    <param name="broker" type="AMQP:Broker">
      <description><![CDATA[Broker to use for the example]]></description>
    </param>
    <param name="exchangeName" type="string">
      <description><![CDATA[Name of the exchange to create for the example]]></description>
    </param>
    <param name="routingKey" type="string">
      <description><![CDATA[Routing key for the example]]></description>
    </param>
  </input>
  <attrib name="errorCode" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="messageTrigger" type="Trigger" read-only="false">
    <value encoded="n"><![CDATA[__NULL__]]></value>
  </attrib>
  <workflow-item name="item0" out-name="item1" catch-name="item3" throw-bind-name="errorCode" type="task">
    <display-name><![CDATA[Prepare the test]]></display-name>
    <script encoded="false"><![CDATA[if ( broker != null ) {
	broker.declareExchange(exchangeName, {type: "fanout"});
	messageTrigger = broker.declareQueueAndReceiveAsync(exchangeName, routingKey, 0);
} else {
	throw "Broker is null!";
}]]></script>
    <in-binding>
      <bind name="broker" type="AMQP:Broker" export-name="broker"/>
      <bind name="exchangeName" type="string" export-name="exchangeName"/>
      <bind name="routingKey" type="string" export-name="routingKey"/>
    </in-binding>
    <out-binding>
      <bind name="messageTrigger" type="Trigger" export-name="messageTrigger"/>
    </out-binding>
    <position y="80.0" x="140.0"/>
  </workflow-item>
  <workflow-item name="item3" throw-bind-name="errorCode" type="end" end-mode="1">
    <position y="130.0" x="320.0"/>
  </workflow-item>
  <workflow-item name="item4" out-name="item5" catch-name="item3" throw-bind-name="errorCode" type="task">
    <display-name><![CDATA[Message processing and cleanup]]></display-name>
    <script encoded="false"><![CDATA[System.log("Trigger: " + messageTrigger);
//System.log("Trigger properties: " + messageTrigger.getProperties());

var msg = broker.retrieveMessage(messageTrigger);

//use msg 
broker.deleteExchange(exchangeName);
]]></script>
    <in-binding>
      <bind name="broker" type="AMQP:Broker" export-name="broker"/>
      <bind name="exchangeName" type="string" export-name="exchangeName"/>
      <bind name="messageTrigger" type="Trigger" export-name="messageTrigger"/>
      <bind name="routingKey" type="string" export-name="routingKey"/>
    </in-binding>
    <out-binding/>
    <position y="200.0" x="140.0"/>
  </workflow-item>
  <workflow-item name="item5" type="end" end-mode="0">
    <position y="230.0" x="180.0"/>
  </workflow-item>
  <workflow-item name="item1" out-name="item4" catch-name="item3" throw-bind-name="errorCode" type="waiting-event">
    <display-name><![CDATA[Waiting event]]></display-name>
    <in-binding>
      <bind name="trigger.ref" type="Trigger" export-name="messageTrigger">
        <description><![CDATA[After a specified event occurs trigger continues workflow execution.]]></description>
      </bind>
    </in-binding>
    <position y="130.0" x="180.0"/>
  </workflow-item>
  <presentation>
    <p-step>
      <title><![CDATA[Wait on trigger without queue construction]]></title>
      <p-group>
        <title><![CDATA[Exmaple input properties]]></title>
        <desc><![CDATA[Select a broker for the example. Specify the exchange and the routing key.
The created exchange is removed at the end of the workflow run.]]></desc>
        <p-param name="broker">
          <desc><![CDATA[Broker]]></desc>
        </p-param>
        <p-param name="exchangeName">
          <desc><![CDATA[Exchange]]></desc>
        </p-param>
        <p-param name="routingKey">
          <desc><![CDATA[Routing key]]></desc>
        </p-param>
      </p-group>
    </p-step>
  </presentation>
</workflow>