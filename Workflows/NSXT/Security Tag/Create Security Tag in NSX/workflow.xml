<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item1" object-name="workflow:name=generic" id="1c749475-aac0-4d31-8079-8aaf6366a85e" version="0.0.9" api-version="6.0.0" allowed-operations="vfe" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[Create Security Tag in NSX]]></display-name>
  <position y="50.0" x="100.0"/>
  <input>
    <param name="payload" type="Properties"/>
  </input>
  <attrib name="vCACHost" type="vCAC:VCACHost" read-only="false">
    <value encoded="n"><![CDATA[dunes://service.dunes.ch/CustomSDKObject?id='7678fd07-7e94-41fb-b504-826e693933a5'&dunesName='vCAC:VCACHost']]></value>
  </attrib>
  <attrib name="username" type="string" read-only="false" conf-id="b076846e-b485-4746-92c6-455f2f4b048d" conf-key="username">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="password" type="SecureString" read-only="false" conf-id="b076846e-b485-4746-92c6-455f2f4b048d" conf-key="password">
    <value encoded="n"><![CDATA[__NULL__]]></value>
  </attrib>
  <workflow-item name="item0" type="end" end-mode="0">
    <position y="45.40909090909091" x="384.5"/>
  </workflow-item>
  <workflow-item name="item1" out-name="item0" type="task">
    <display-name><![CDATA[Scriptable task]]></display-name>
    <script encoded="false"><![CDATA[//Extract payload properties
var machine = payload.get("machine");
var vmName = machine.get("name");
System.debug("vmName "+vmName);
//Get the vCAC VM properties
var properties = new Properties();
properties.put("VirtualMachineID",machine.get("id"));
var virtualMachineEntity = vCACEntityManager.readModelEntity(vCACHost.id, "ManagementModelEntities.svc", "VirtualMachines", properties, null);
System.log("virtualMachineEntity"+virtualMachineEntity);
var vmProperties = new Properties();
var virtualMachinePropertiesEntities = virtualMachineEntity.getLink(vCACHost, "VirtualMachineProperties");
for each (var virtualMachinePropertiesEntity in virtualMachinePropertiesEntities) {
    var propertyName = virtualMachinePropertiesEntity.getProperty("PropertyName");
    var propertyValue = virtualMachinePropertiesEntity.getProperty("PropertyValue");
    System.log("Found property " + propertyName + " = " + propertyValue);
    vmProperties.put(propertyName, propertyValue);
}
//Get all the necessary properties
var applicationName = vmProperties.get("cris.hostname.Type");
var location = vmProperties.get("cris.hostname.location");
var envId =  vmProperties.get("ReservationPolicyID");
var software = vmProperties.get("cris.software");
System.debug("Software "+software);


var bgCode = vmProperties.get("bgcode");

//var blueprint = System.getContext().getParameter("__asd_composition_blueprintId");
var blueprint = vmProperties.get("VirtualMachine.Cafe.Blueprint.Id");
var component = vmProperties.get("VirtualMachine.Cafe.Blueprint.Component.Id");
var user = System.getContext().getParameter("__asd_requestedFor");
var tenant = System.getContext().getParameter("__asd_tenantRef");
var subtenantId = System.getContext().getParameter("__asd_subtenantRef")

var reservationProp = System.getModule("com.vmware.vra.reservations").getApplicableReservationPolicyName(blueprint,component,user,tenant,subtenantId,reservationProp) ;
System.debug("Environment Name "+reservationProp.get(envId));
var environmentName = reservationProp.get(envId)

var envCode;
if(environmentName == "Production" || environmentName == "Gold-Production"){
	envCode = "prod"
}else if(environmentName == "Critical Production" || environmentName == "Gold-Critical Production"){
	envCode = "prod"
}else if(environmentName == "Development" || environmentName == "Gold-Development"){
	envCode = "tnd"
}
System.debug("Env Code :"+envCode);
System.debug("Bg Code :"+bgCode);
System.debug("Applicationame :"+applicationName);
//Get VM Instance ID
var vCenters=VcPlugin.allSdkConnections;
var vmInstanceId;
for (j in vCenters){
	System.log("vCenter Name "+vCenters[j].name);
	var vms = vCenters[j].allVirtualMachines
	for (i in vms){
		//System.log("vm name "+vms[i].name);	
		if(vms[i].name == vmName){
			vmInstanceId = vms[i].instanceId
			System.debug("VM Instance id :"+vmInstanceId);
			break;
		}
    }
}
//Getting Authentication token
var authenticationToken = System.getModule("com.vmware.indcoe.util").base64encode(username + ":" + password)
/**
	Get the NSX T REST host from configuration element
**/
var restHost;
var category = Server.getConfigurationElementCategoryWithPath("Helper")
//die in a fire if non-existent
if (category == null) {
    throw "Configuration element category '" + categoryPath + "' not found or empty!";
}
//get _all_ the elements
var elements = category.configurationElements;
var elementName = "NSXTHost";
var attributeName = "nsxtHost"
//retrieve names
for (i = 0; i < elements.length; i++) {
     if (elements[i].name == elementName) {
         //found required element
         restHost = elements[i].getAttributeWithKey(attributeName).value;
         if (restHost != null) {
             System.debug("Found attribute '" + attributeName + "' in '" + elementName + "' with value '" +restHost + "'");
         }
     }
}
//Preparting header prop for rest api
var header = new Properties()
header.put("Authorization", "Basic " +authenticationToken);
//Process the Json content with existing one
var tagResult = getExistingTag(restHost,vmInstanceId,header);
if(tagResult["statusCode"]==200 ||tagResult["statusCode"]==201 || tagResult["statusCode"]==204){
	System.debug("Getting existing tag content rest operation completed ")
}else throw "Getting existing tag content rest operation in complete "
//Getting JSON object from the result
var jsonTag = tagResult["contentAsObject"];
var updateContent = [{"scope": "", "tag": ""+envCode+""},
        {"scope": "", "tag": ""+applicationName+""},
        {"scope": "", "tag": ""+bgCode+""}]
//var strTagContent = JSON.stringify(updateContent)
try{
	var exContent = jsonTag
	var len = exContent.results[0].tags.length
	for(var m in updateContent){
		exContent.results[0].tags[len] = updateContent[m];
		len++;
	}
	var updatedStrContent = JSON.stringify(exContent);
	System.debug("after added content in the existing tag :"+updatedStrContent);
	//Calling updateTag to update the content
	var updateResult = updateTag(restHost,header,updatedStrContent);
	if(updateResult["statusCode"]==200 ||updateResult["statusCode"]==201 || updateResult["statusCode"]==204 ){
		System.debug("Try block after updated tag content "+updateResult["contentAsString"])
	}else throw "Try block after updated tag content in complete "+updateResult["contentAsString"]
}catch(e){
	System.debug("Creating new tag as it doesn't exist in the retrieved content ")
	var newTag ={
	    "external_id": ""+vmInstanceId+"",
	    "tags": [
	        {"scope": "", "tag": ""+envCode+""},
       	 	{"scope": "", "tag": ""+applicationName+""},
        	{"scope": "", "tag": ""+bgCode+""}
   		]
	}
	if(software!=null || software!=undefined || software ==""){
		var newTag ={
		    "external_id": ""+vmInstanceId+"",
		    "tags": [
		        {"scope": "", "tag": ""+envCode+""},
	       	 	{"scope": "", "tag": ""+applicationName+""},
	        	{"scope": "", "tag": ""+bgCode+""},
				{"scope": "", "tag": ""+software+""}
	   		]
		}
	}
	//Calling updateTag to update the content
	//var updContent = jsonTag;	
	//updContent =  newTag
	var strContent = JSON.stringify(newTag);
	System.debug("Added tags in the existing content "+strContent);
	var updateResult = updateTag(restHost,header,strContent);
	if(updateResult["statusCode"]==200 ||updateResult["statusCode"]==201 || updateResult["statusCode"]==204){
		System.debug("Catch block updated rest operation result "+updateResult["contentAsString"])
	}else throw "Catch block updated rest operation failure "+updateResult["contentAsString"]
}
function getExistingTag(restHost,vmInstanceId,header){
	var apiUrl = "/api/v1/fabric/virtual-machines?external_id="+vmInstanceId
    var requestMethod = "GET"
    var typeContent = "json"
    var actionResult = System.getModule("com.vmware.indcoe.library.nsxlbgeneric").ExecuteRest(restHost,apiUrl,requestMethod,null,typeContent,header)
    System.debug("Existing Tag result by vmInstance id:"+actionResult["contentAsString"]);
	return actionResult;
}
function updateTag(restHost,header,content){
	var apiUrl = "/api/v1/fabric/virtual-machines?action=update_tags";
    var requestMethod = "POST"
    var typeContent = "json"
    var actionResult = System.getModule("com.vmware.indcoe.library.nsxlbgeneric").ExecuteRest(restHost,apiUrl,requestMethod,content,typeContent,header);
	return actionResult;
}]]></script>
    <in-binding>
      <bind name="payload" type="Properties" export-name="payload"/>
      <bind name="vCACHost" type="vCAC:VCACHost" export-name="vCACHost"/>
      <bind name="username" type="string" export-name="username"/>
      <bind name="password" type="SecureString" export-name="password"/>
    </in-binding>
    <out-binding/>
    <position y="55.40909090909091" x="204.5"/>
  </workflow-item>
  <presentation>
    <p-param name="payload">
      <desc><![CDATA[payload]]></desc>
    </p-param>
  </presentation>
</workflow>