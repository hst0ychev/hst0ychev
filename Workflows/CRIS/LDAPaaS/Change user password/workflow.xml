<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item1" object-name="workflow:name=generic" id="585a7887-9f8d-4183-8951-f81d4a95258d" version="0.0.3" api-version="6.0.0" allowed-operations="evf" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[Change user password]]></display-name>
  <position y="50.0" x="100.0"/>
  <input>
    <param name="usersEmailId" type="string">
      <description><![CDATA[The requesting User's Email Address.]]></description>
    </param>
    <param name="username" type="string">
      <description><![CDATA[The username]]></description>
    </param>
    <param name="password" type="SecureString">
      <description><![CDATA[New password]]></description>
    </param>
    <param name="confirmPassword" type="SecureString">
      <description><![CDATA[New password for confirmation]]></description>
    </param>
  </input>
  <attrib name="adUsername" type="string" read-only="false" conf-id="66a86a5d-df46-4200-9c90-046802868f44" conf-key="username">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="adPassword" type="SecureString" read-only="false" conf-id="66a86a5d-df46-4200-9c90-046802868f44" conf-key="password">
    <value encoded="n"><![CDATA[__NULL__]]></value>
  </attrib>
  <attrib name="adServer" type="string" read-only="false" conf-id="66a86a5d-df46-4200-9c90-046802868f44" conf-key="adServer">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="psHost" type="PowerShell:PowerShellHost" read-only="false" conf-id="66a86a5d-df46-4200-9c90-046802868f44" conf-key="psHost">
    <value encoded="n"><![CDATA[dunes://service.dunes.ch/CustomSDKObject?id='06fbc5cb-8c65-43b5-8657-370adbecf58c'&dunesName='PowerShell:PowerShellHost']]></value>
  </attrib>
  <attrib name="smtp_host" type="string" read-only="false" conf-id="0afdf55e-f4c5-4b91-93da-c7f809643af2" conf-key="smtp_host">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="smtp_port" type="number" read-only="false" conf-id="0afdf55e-f4c5-4b91-93da-c7f809643af2" conf-key="smtp_port">
    <value encoded="n"><![CDATA[__NULL__]]></value>
  </attrib>
  <attrib name="smtp_username" type="string" read-only="false" conf-id="0afdf55e-f4c5-4b91-93da-c7f809643af2" conf-key="smtp_username">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="smtp_password" type="SecureString" read-only="false" conf-id="0afdf55e-f4c5-4b91-93da-c7f809643af2" conf-key="smtp_password">
    <value encoded="n"><![CDATA[__NULL__]]></value>
  </attrib>
  <attrib name="smtp_from_id" type="string" read-only="false" conf-id="0afdf55e-f4c5-4b91-93da-c7f809643af2" conf-key="smtp_from_id">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="smtp_from_name" type="string" read-only="false" conf-id="0afdf55e-f4c5-4b91-93da-c7f809643af2" conf-key="smtp_from_name">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="use_ssl" type="boolean" read-only="false" conf-id="0afdf55e-f4c5-4b91-93da-c7f809643af2" conf-key="use_ssl">
    <value encoded="n"><![CDATA[__NULL__]]></value>
  </attrib>
  <attrib name="use_start_tls" type="boolean" read-only="false" conf-id="0afdf55e-f4c5-4b91-93da-c7f809643af2" conf-key="use_start_tls">
    <value encoded="n"><![CDATA[__NULL__]]></value>
  </attrib>
  <attrib name="smtp_to_address" type="Array/string" read-only="false" conf-id="0afdf55e-f4c5-4b91-93da-c7f809643af2" conf-key="smtp_to_address_LDAPaaS">
    <value encoded="n"><![CDATA[__NULL__]]></value>
  </attrib>
  <attrib name="vcacCafeHost" type="vCACCAFE:VCACHost" read-only="false" conf-id="66a86a5d-df46-4200-9c90-046802868f44" conf-key="vcacCafeHost">
    <value encoded="n"><![CDATA[dunes://service.dunes.ch/CustomSDKObject?id='62acd93e-6bf4-487f-8c9a-071641a96849'&dunesName='vCACCAFE:VCACHost']]></value>
  </attrib>
  <workflow-item name="item0" type="end" end-mode="0">
    <position y="45.40909090909091" x="384.5"/>
  </workflow-item>
  <workflow-item name="item1" out-name="item0" type="task">
    <display-name><![CDATA[Process Request]]></display-name>
    <script encoded="false"><![CDATA[function SendEmail(subject, body) {

	//Add the user's email to the list of email IDs to send email to.
	if (usersEmailId && usersEmailId != "") {
		smtp_to_address.push(usersEmailId);
	}
	
	var commaSeparatedEmails = '';
	for(var i in smtp_to_address)
	{
		commaSeparatedEmails += smtp_to_address[i]+',';
	}
	
	//workflow ID of Library -> Mail -> 'Send notification'
	var workflowId = '8D80808080808080808080808080808089808080012318760241416446ce5b52f';

	//ready the workflow params
	var workflowParameters = new Properties();
	workflowParameters.put("smtpHost", smtp_host);
	workflowParameters.put("smtpPort", smtp_port);
	workflowParameters.put("username", smtp_username);
	workflowParameters.put("password", smtp_password);
	workflowParameters.put("fromName", smtp_from_name);
	workflowParameters.put("fromAddress", smtp_from_id);
	workflowParameters.put("toAddress", commaSeparatedEmails);
	workflowParameters.put("subject", subject);
	workflowParameters.put("content", body);
	workflowParameters.put("useSsl", use_ssl);
	workflowParameters.put("UseStartTls", use_start_tls);

	//Run this workflow.
	var workflowToLaunch = Server.getWorkflowWithId(workflowId);
	
	//Fetch a token.
	var workflow_token = workflowToLaunch.execute(workflowParameters);
	while (workflow_token.state === "running") {
		System.sleep(3000);
	}
	System.log("Email sent");
	//return after workflow finished 'running'
	return true;
}

try {
	//Try to fetch catalog request ID
	catalogRequestId = System.getContext().getParameter("__asd_catalogRequestId");
}
catch (e) {
	//If we did not get catalog request ID, we use boolean false
	catalogRequestId = false;
}

if (catalogRequestId) {
	//We got catalogRequest ID from the inputs, now we try to get request number from that.
	System.log("Request Id by vRA:" + catalogRequestId);
	var request = vCACCAFEEntitiesFinder.getCatalogItemRequest(vcacCafeHost, catalogRequestId);
	requestNumber = request.getRequestNumber();
}
else {
	var date = new Date();
	requestNumber = date.getFullYear() + "_" + (date.getMonth() + 1) + "_" + date.getDate() + "_" + date.getHours() + "_" + date.getMinutes();
	System.log("Using request number as current date-time since __asd_catalogRequestId was not found");
}

System.log("Request Number for this request:  " + requestNumber);

var adObject = System.getModule("com.vmware.indcoe.active_directory").class(adUsername, adPassword, adServer, psHost);

if (!adObject) {
	var errorMsg = "Error creating AD Object, please check with admin team";
	var subject = "Request #"+requestNumber+" failed - Critical Component Missing";
	var body = "Hello, <br/>The Request with request number: " + requestNumber + " has failed.";
	body += errorMsg;
	body += "<br /><br /> This is a system generated email, do not reply to this email<br />";
	if(SendEmail(subject, body))
	{
		throw errorMsg;
	}
}

// Actual workflow starts now...

System.log("Validating user inputs...");

if(!username)
{
	var errorMsg = "Username invalid or not specified.";
	var subject = "Request #"+requestNumber+" failed - Critical Component Missing";
	var body = "Hello, <br/>The Request with request number: " + requestNumber + " has failed.";
	body += errorMsg;
	body += "<br /><br /> This is a system generated email, do not reply to this email<br />";
	if(SendEmail(subject, body))
	{
		throw errorMsg;
	}
}

if(!password || !confirmPassword)
{
	var errorMsg = "Passwords blank or not provided.";
	var subject = "Request #"+requestNumber+" failed - Critical Component Missing";
	var body = "Hello, <br/>The Request with request number: " + requestNumber + " has failed.";
	body += errorMsg;
	body += "<br /><br /> This is a system generated email, do not reply to this email<br />";
	if(SendEmail(subject, body))
	{
		throw errorMsg;
	}
}

if(password !== confirmPassword)
{
	var errorMsg = "Passwords entered do not match.";
	var subject = "Request #"+requestNumber+" failed";
	var body = "Hello, <br/>The Request with request number: " + requestNumber + " has failed.";
	body += errorMsg;
	body += "<br /><br /> This is a system generated email, do not reply to this email<br />";
	if(SendEmail(subject, body))
	{
		throw errorMsg;
	}
}

//The username from vRA is in form of username@domain, we use split to extract username

var split_username = username.split("@");
username = split_username[0];

if(!adObject.CheckIfUserExists(username))
{
    System.log("User '"+username+"' not found in AD");
	var errorMsg = "The user specified in the request does not exist.";
	var subject = "Request #"+requestNumber+" failed - Critical Component Missing";
	var body = "Hello, <br/>The Request with request number: " + requestNumber + " has failed.";
	body += errorMsg;
	body += "<br /><br /> This is a system generated email, do not reply to this email<br />";
	if(SendEmail(subject, body))
	{
		throw errorMsg;
	}
}

System.log("Trying to change user password");


try{
	if(adObject.ChangeUserPassword(username,password))
	{
		//Password reset successful
		var message = "Password reset request completed successfully.";
		var subject = "Request #"+requestNumber+" completed successfully";
		var body = "Hello, <br/>The Request with request number: " + requestNumber + " has failed.";
		body += errorMsg;
		body += "<br /><br /> This is a system generated email, do not reply to this email<br />";
		SendEmail(subject, body)
	}
}
catch (error)
{
	//The above request will only fail in case the password change was unsuccessful. Send that message appropriately.
	var errorMsg = "Password reset failed - The password does not meet the length, complexity, or history requirement of the domain. Please contact the admin team";
	var subject = "Request #"+requestNumber+" failed - Critical Component Missing";
	var body = "Hello, <br/>The Request with request number: " + requestNumber + " has failed.";
	body += errorMsg;
	body += "<br /><br /> This is a system generated email, do not reply to this email<br />";
	if(SendEmail(subject, body))
	{
		throw errorMsg;
	}
}

var message = "User '"+username+"'s password changed successfully.";
var subject = "Request #"+requestNumber+" completed successfully";
var body = "Hello, <br/>The Request with request number: " + requestNumber + " has completed successfully.";
body += message;
body += "<br /><br /> This is a system generated email, do not reply to this email<br />";
SendEmail(subject, body);

System.log(message);
]]></script>
    <in-binding>
      <bind name="usersEmailId" type="string" export-name="usersEmailId"/>
      <bind name="adUsername" type="string" export-name="adUsername"/>
      <bind name="adPassword" type="SecureString" export-name="adPassword"/>
      <bind name="adServer" type="string" export-name="adServer"/>
      <bind name="psHost" type="PowerShell:PowerShellHost" export-name="psHost"/>
      <bind name="smtp_host" type="string" export-name="smtp_host"/>
      <bind name="smtp_port" type="number" export-name="smtp_port"/>
      <bind name="smtp_username" type="string" export-name="smtp_username"/>
      <bind name="smtp_password" type="SecureString" export-name="smtp_password"/>
      <bind name="smtp_from_id" type="string" export-name="smtp_from_id"/>
      <bind name="smtp_from_name" type="string" export-name="smtp_from_name"/>
      <bind name="use_ssl" type="boolean" export-name="use_ssl"/>
      <bind name="use_start_tls" type="boolean" export-name="use_start_tls"/>
      <bind name="smtp_to_address" type="Array/string" export-name="smtp_to_address"/>
      <bind name="username" type="string" export-name="username"/>
      <bind name="password" type="SecureString" export-name="password"/>
      <bind name="confirmPassword" type="SecureString" export-name="confirmPassword"/>
      <bind name="vcacCafeHost" type="vCACCAFE:VCACHost" export-name="vcacCafeHost"/>
    </in-binding>
    <out-binding/>
    <position y="55.40909090909091" x="204.5"/>
  </workflow-item>
  <presentation>
    <p-param name="usersEmailId">
      <desc><![CDATA[The requesting User's Email Address.]]></desc>
    </p-param>
    <p-param name="username">
      <desc><![CDATA[The username]]></desc>
    </p-param>
    <p-param name="password">
      <desc><![CDATA[New password]]></desc>
    </p-param>
    <p-param name="confirmPassword">
      <desc><![CDATA[New password for confirmation]]></desc>
    </p-param>
  </presentation>
</workflow>